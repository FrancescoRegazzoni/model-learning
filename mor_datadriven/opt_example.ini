[Problem]
example = transmission_line_circuit
problem = NTL1.ini
; Type of dataset source: "file", "script" (DEFAULT: "file")
dataset_type=file
; Used if dataset_type="file". Sintax: <file_name.mat>;indexes;penalize diff;closed loop;dt_evaluation|.....
dataset_source_train=samples_x_const.mat;1:5|samples_x.mat;1:10|samples_loop.mat;1:3;1;0
dataset_source_tests=samples_x_const.mat;49:50|samples_x.mat;99:100
; Used if dataset_type="script". Name of the dataset to pass to the script
dataset_source=

; noise and bias added to data. Noise are measured in [Y*sqrt(T)] and [U*sqrt(T)], non normalized. (DEFAULT: 0)
noise_y = 0
bias_y = 0
noise_u = 0
bias_u = 0

[Model]
; model class (DEFAULT: modelclass_ANN)
modelclass = @modelclass_linear
; number of unknowns (outputs included, if useG=false)
N=3
; external / internal (DEFAULT)
dynamics_type=internal
; number of sample-specific parameters (DEFAULT: 0)
N_alpha=0
; if not the output y is given by the first entries of the state x (DEFAULT: 0)
useG=0
; Initial value of x (DEFAULT: 0)
x_init=0
; Target value of x, if ratio is penalized (DEFAULT: 0)
x_end=0


[Output]
name=NTL1
; (DEFAULT: 1)
save=1
; (DEFAULT: 1)
add_time_stamp=1
; (DEFAULT: 1)
history=1
; NB: the following three fields may be specified by a frequency or by a function ('@(k) ...') returning 1 for the iterations to include
; frequency for saving a file in /networks folder (DEFAULT: '@(k) (k<10) || ((k < 500) && mod(k,10)==0) || mod(k,100)==0')
period_snap=@(k) (k<10) || ((k < 500) && mod(k,10)==0) || mod(k,100)==0
; frequency of updateing the net.mat file (DEFAULT: 1)
period_save=1
; plot frequency (DEFAULT: '@(k) (k<10) || ((k < 500) && mod(k,10)==0) || mod(k,100)==0')
period_plot=1

[Normalization]
; lower and upper bounds for u and y (can be either scalar or vectors). The intervals are mapped to [-1,1]. (DEFAULT: -1,1)
u_min  = 0
u_max  = 1
y_min  = 0
y_max  = .02
; renormalizetion constant for time (DEFAULT: 1)
t_norm = .1

[ANN]
; hidden layers
layF=8
layG=3;2
; if yes then the activation function is not applied to the last layer (DEFAULT: 1)
BetaOutput=1
; default/d, shuffle/s, file/f, <seed> (DEFAULT: "shuffle")
init_type=f
init_file=NTL1_N3_dof67_g0_2018-09-20_21-56-36
; 0 (init), number of iteration, "end" (DEFAULT: "end")
init_iter=350

[Initialization]
; used if fixed_x0 is false. In case of useG=false, this is ne non-normalized value (DEFAULT: 0,0)
x0_min = 0
x0_max = 0
; used if N_alpha > 0 (DEFAULT: 0,0)
alpha_min = 0
alpha_max = 0

[Penalizations]
; NB penalization coefficients can be function of the iteration index "k"
; penalization of the difference wrt the output u
; pen_diff=.5 + .5*max(0,min(1,(k-(-1))/10))

custom_penalizations = @penalization_custom1;@penalization_custom1

; penalization of difference wrt exact solution (DEFAULT: 1)
pen_diff=1
; q = quadratic (y - \hat{y})^2; d = discrete
pen_diff_type=q
pen_diff_discrete_tol=.5
pen_diff_discrete_coeff_within_int=1e-2
; penalization of coefficients (DEFAULT: 0)
pen_f=1
; q = quadratic (1/2 x^2); i=interval
pen_f_type=q
pen_f_interval=[-1,1]
pen_g=0
pen_a=0
pen_a_type=i
pen_a_interval=[-.5,.5]

; penalization of "d f/d alpha" evaluated on all the alpha_j and on a grid of pen_dfda_Npt for the state and the input
pen_dfda=1
pen_dfda_Npt=10

; penalization of (f(x_star,u_star,alpha)-alpha) \forall alpha 
pen_fconstr=0
; target point (DEFAULT: 0, 0)
pen_fconstr_xstar=
pen_fconstr_ustar=
; number points in alpha (DEFAULT: 10)
pen_fconstr_Npt=10
; the area where the points are taken is the hypercube containing the current values of alpha, with a border increased of this franction (DEFAULT: 0.2)
pen_fconstr_grid_bd_wd=.2
; name of the simualtion used to inizialize the values of alpha. NB: train set must coincide. (DEFAULT: empty)
pen_fconstr_initalphadir=

; penalization of the final value and of the discrepancy between the time mean and RaiseTarget (for both DEFAULT: 0)
pen_end=0
pen_raise=0
RaiseTarget=1e-2

; penalization of the ratio final value on time mean (NB: valid only for train samples such that closed_loop = 1) (DEFAULT: 0)
; pen_ratio=0 + 1e1*max(0,min(1,(k-(20))/50))
pen_ratio = 1 
;pen_ratio=1
; 1 = end / L1 norm; 2 = end / L2 norm (DEFAULT: 2)
ratio_type=2
; if 1 also the final value of the output is penalized (DEFAULT: 0)
ratio_penalize_outputsratio_penalize_outputs=0

; penalization to make the reference state an equilibrium configuration, and to make it stable (for both DEFAULT: 0)
; pen_origstable_eq = 0 + 1e1*max(0,min(1,(k-(100))/50))
pen_origstable_eq = 0
pen_origstable_stab = 0
pen_origstable_stab_th = min(-1e-10,-1e-3/(k+1))
pen_origstable_u =
pen_origstable_y =

; penalization of ....
pen_alpha_eq = 0
pen_alpha_eq_ustar = 

; penalization of ....
pen_initial_state_eq = 

[Numerics]
; "LM" Levenberg-Marquardt, "lbfgs", "SD" Steepest descent, "test" test derivatives (DEFAULT: "LM")
algorithm=LM
; 0 = alpha fixed; 1 = 1 condition; 2 = 2 conditions (DEFAULT: 2)
linearsearch=2
; maximum number of itarations (DEFAULT: "inf")
nmax_iter = inf
; if true the gradient is evaluated numerically (DEFAULT: 0), with a step epNum (DEFAULT: 1e-4)
ComputeGradientsNum = 0; 
epNum = 1e-4;

; Simulated annealing (DEFAULT: 0)
SA          = 0
SA_stepsize = .1 * k^(-1)
SA_T        =.1*exp(-k/2e2)

; "@"+function , absolute value
dt_integration = 5e-3
; dt for evaluation of the difference. "x"+period, absolute value (DEFAULT: "x1")
dt_evaluation  = x1

; how time series are interpolated on the new time grid: "pointwise": linear interpolation; "mean_forward" (DEFAULT): mean over the next time window
interpolation_mode_u = pointwise
interpolation_mode_y = pointwise

[plots]
; (DEFAULT: 1)
show_u = 1
; (DEFAULT: 1)
do_plot = 1

